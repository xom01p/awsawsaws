
---

# AWS에서 서버 설정, EC2 자동화 및 VPN을 통한 안전한 접근 가이드

## 요약

- **목표**: AWS에서 서버 설정, EC2 작업 자동화, VPN을 통한 안전한 접근을 통합적으로 구현
- **구성**: VPC, 서브넷, EC2, Application Load Balancer(ALB), DynamoDB, CloudWatch 설정과 EC2 자동화, VPN 연결
- **방법**: AWS Systems Manager Automation, AWS CLI, CloudFormation, Auto Scaling, Lambda, CloudWatch Events, AWS Client VPN, 자체 관리 VPN, Site-to-Site VPN 활용
- **결과**: ALB DNS를 통해 외부 트래픽을 수신하는 서버 구축, EC2 작업 자동화, VPN을 통한 안전한 자원 접근

---

## 개요

이 가이드는 AWS에서 EC2 인스턴스를 활용한 서버 설정, EC2 작업 자동화, 그리고 VPN을 통한 안전한 접근 방법을 단계별로 설명합니다. VPC 아키텍처를 설정하고, 공용 서브넷에 ALB를, 사설 서브넷에 EC2 인스턴스를 배치하며, DynamoDB와 CloudWatch를 통합합니다. 추가로 EC2 작업(시작, 중지, 재시작, AMI 생성 등)을 자동화하고, AWS Client VPN, 자체 관리 VPN, Site-to-Site VPN을 통해 VPC 내 자원에 안전하게 접근하는 방법을 다룹니다. 예시 설정과 주석을 포함하여 보편적인 설정 방법을 제공합니다.

---

## 단계별 설정 및 자동화 과정

### 1. VPC 및 서브넷 설정

VPC는 가상 사설 네트워크로, 리소스를 격리된 환경에서 실행합니다. 공용 서브넷은 외부 트래픽을 처리하고, 사설 서브넷은 내부 리소스를 보호합니다.

#### 설정 테이블

| 작업                     | 설명 및 예시                                                                 | CIDR 블록 예시       |
|--------------------------|------------------------------------------------------------------------------|----------------------|
| VPC 생성                 | IPv4 CIDR 예: 10.0.0.0/16, 최소 2개 AZ 권장                                 | 10.0.0.0/16         |
| 공용 서브넷 생성         | AZ us-east-2a, CIDR 예: 10.0.1.0/24, 인터넷 게이트웨이 연결                 | 10.0.1.0/24         |
| 사설 서브넷 생성         | AZ us-east-2b, CIDR 예: 10.0.2.0/24, NAT 게이트웨이로 외부 접근 관리        | 10.0.2.0/24         |
| 인터넷 게이트웨이 부착   | 공용 서브넷 라우팅, 예: igw-12345678 부착                                  | -                   |
| 라우팅 테이블 설정       | 공용 서브넷에 0.0.0.0/0 라우트 추가, 사설 서브넷 NAT 게이트웨이 라우트 설정 | -                   |

#### 명령어 및 주석

```bash
# VPC 생성: 네트워크 격리를 위한 가상 사설 네트워크 생성
# 🔒 보안: 리소스를 논리적으로 격리하여 외부 접근 제한
aws ec2 create-vpc --cidr-block 10.0.0.0/16 --tag-specifications 'ResourceType=vpc,Tags=[{Key=Name,Value=MyVPC}]'

# 공용 서브넷 생성: 인터넷 게이트웨이에 연결, ALB 및 VPN 서버 배치용
# 🌐 공용: 외부 트래픽을 처리하기 위한 서브넷
aws ec2 create-subnet --vpc-id vpc-12345678 --cidr-block 10.0.1.0/24 --availability-zone us-east-2a --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=PublicSubnetA}]'

# 사설 서브넷 생성: 외부 접근 제한, EC2 인스턴스 배치용
# 🔐 사설: 내부 리소스 보호를 위한 서브넷
aws ec2 create-subnet --vpc-id vpc-12345678 --cidr-block 10.0.2.0/24 --availability-zone us-east-2b --tag-specifications 'ResourceType=subnet,Tags=[{Key=Name,Value=PrivateSubnetB}]'

# 인터넷 게이트웨이 생성 및 부착: 공용 서브넷 인터넷 연결
# 🌍 인터넷 연결: 공용 서브넷이 외부와 통신 가능하도록 설정
aws ec2 create-internet-gateway --tag-specifications 'ResourceType=internet-gateway,Tags=[{Key=Name,Value=MyIGW}]'
aws ec2 attach-internet-gateway --vpc-id vpc-12345678 --internet-gateway-id igw-12345678

# 라우팅 테이블 설정: 공용 서브넷에 0.0.0.0/0 라우트 추가
# 🚦 라우팅: 트래픽 흐름을 제어하는 라우팅 규칙 설정
aws ec2 create-route-table --vpc-id vpc-12345678 --tag-specifications 'ResourceType=route-table,Tags=[{Key=Name,Value=PublicRouteTable}]'
aws ec2 create-route --route-table-id rtb-12345678 --destination-cidr-block 0.0.0.0/0 --gateway-id igw-12345678
aws ec2 associate-route-table --subnet-id subnet-12345678 --route-table-id rtb-12345678
```

---

### 2. EC2 인스턴스 설정 및 Auto Scaling 자동화

EC2 인스턴스는 사설 서브넷에 배치되며, Auto Scaling으로 트래픽에 따라 인스턴스를 자동으로 조정합니다. AWS Systems Manager Automation으로 EC2 작업(재시작, 중지 등)을 자동화합니다.

#### 설정 테이블

| 작업                     | 설명 및 예시                                                                 | 예시 값              |
|--------------------------|------------------------------------------------------------------------------|----------------------|
| 런치 템플릿 생성         | AMI 예: Amazon Linux 2, 인스턴스 유형 t2.micro, 사설 서브넷 subnet-12345678  | AMI: ami-0c55b159cbfafe1f0 |
| Auto Scaling 그룹 생성   | 최소 2개, 최대 4개, 원하는 2개, VPC 존 식별자 subnet-12345678, subnet-98765432 | 최소 2, 최대 4, 원하는 2 |
| 보안 그룹 설정           | 포트 80(HTTP), 443(HTTPS) 허용, 사설 서브넷 내 통신                        | 포트 80, 443        |

#### 명령어 및 주석

```bash
# EC2 인스턴스 런치 템플릿 생성: 사설 서브넷에 배포, 예시 AMI: Amazon Linux 2
# 🖥️ EC2: 컴퓨팅 리소스를 정의하고 사설 서브넷에 배치
aws ec2 create-launch-template --launch-template-data '{"ImageId":"ami-0c55b159cbfafe1f0","InstanceType":"t2.micro","NetworkInterfaces":[{"DeviceIndex":0,"SubnetId":"subnet-12345678","Groups":["sg-12345678"]}]}' --tag-specifications 'ResourceType=launch-template,Tags=[{Key=Name,Value=MyTemplate}]'

# Auto Scaling 그룹 생성: 최소 2개 인스턴스, 최대 4개, 원하는 2개
# 📈 Auto Scaling: 트래픽에 따라 인스턴스 수를 자동 조정
aws autoscaling create-auto-scaling-group --auto-scaling-group-name MyASG --launch-template LaunchTemplateId=lt-12345678 --min-size 2 --max-size 4 --desired-capacity 2 --vpc-zone-identifier "subnet-12345678,subnet-98765432"

# 보안 그룹 설정: ALB에서 EC2로 트래픽 허용 (포트 80, 헬스 체크)
# 🔒 보안: 필요한 포트만 열어 보안 유지
aws ec2 authorize-security-group-ingress --group-id sg-12345678 --protocol tcp --port 80 --cidr-blocks 10.0.0.0/16
```

#### EC2 작업 자동화: Systems Manager Automation

AWS Systems Manager Automation으로 EC2 작업(재시작, 중지, AMI 생성 등)을 자동화합니다.

```bash
# Systems Manager Automation: EC2 인스턴스 재시작
# 🔄 재시작: AWS-RestartEC2Instance 런북으로 자동화
aws ssm start-automation-execution --document-name "AWS-RestartEC2Instance" --parameters '{"InstanceId":["i-1234567890abcdef0"]}'

# EC2 인스턴스 중지: 비용 절감을 위해 비활성 시간에 실행
# ⏹️ 중지: AWS-StopEC2Instance 런북으로 자동화
aws ssm start-automation-execution --document-name "AWS-StopEC2Instance" --parameters '{"InstanceId":["i-1234567890abcdef0"]}'

# AMI 생성: 백업을 위해 EC2 인스턴스 이미지 생성
# 📸 백업: AWS-CreateImage 런북으로 자동화
aws ssm start-automation-execution --document-name "AWS-CreateImage" --parameters '{"InstanceId":"i-1234567890abcdef0","ImageName":"MyAMI-`date +%F`"}'
```

#### 추가 EC2 자동화: AWS CLI 및 CloudWatch Events

AWS CLI와 CloudWatch Events를 활용한 추가 자동화 예시입니다.

```bash
# AWS CLI 스크립팅: 비활성 시간 동안 인스턴스 중지
# 💰 비용 절감: 비활성 시간에 리소스 사용 최소화
#!/bin/bash
INSTANCE_IDS=("i-1234567890abcdef0" "i-0987654321fedcba0")
for id in "${INSTANCE_IDS[@]}"; do
  aws ec2 stop-instances --instance-ids $id
done
sleep 28800  # 8시간 대기
for id in "${INSTANCE_IDS[@]}"; do
  aws ec2 start-instances --instance-ids $id
done

# CloudWatch Events: 매일 EBS 스냅샷 생성
# 📅 스케줄링: 정기 백업으로 데이터 보호
aws events put-rule --name "DailySnapshot" --schedule-expression "cron(0 2 * * ? *)"
aws events put-targets --rule DailySnapshot --targets "Id"="1","Arn"="arn:aws:lambda:us-east-2:123456789012:function:CreateSnapshot"
```

---

### 3. Application Load Balancer 설정

ALB는 공용 서브넷에 배치되어 트래픽을 EC2 인스턴스로 분산합니다. 인터넷 대면형으로 설정해 외부 접근을 허용합니다.

#### 설정 테이블

| 작업                     | 설명 및 예시                                                                 | 예시 값              |
|--------------------------|------------------------------------------------------------------------------|----------------------|
| ALB 생성                 | 인터넷 대면형, 공용 서브넷 subnet-12345678, subnet-98765432, 보안 그룹 sg-12345678 | 이름: MyALB, 포트 80 |
| 타겟 그룹 생성           | EC2 인스턴스 타겟, 포트 80, 프로토콜 HTTP, VPC vpc-12345678                 | 이름: MyTargetGroup  |
| 타겟 등록 및 리스너 설정 | EC2 인스턴스 i-12345678901234567, i-98765432109876543 등록, HTTP 포트 80 라우팅 | 타겟 그룹 ARN 확인   |

#### 명령어 및 주석

```bash
# ALB 생성: 인터넷 대면형, 공용 서브넷에 배치
# ⚖️ 로드 밸런싱: 트래픽을 EC2 인스턴스로 분산
aws elbv2 create-load-balancer --name MyALB --subnets subnet-12345678 subnet-98765432 --security-groups sg-12345678 --scheme internet-facing

# 타겟 그룹 생성: EC2 인스턴스 타겟, 포트 80, 프로토콜 HTTP
# 🎯 타겟: 트래픽을 보낼 EC2 인스턴스 그룹 정의
aws elbv2 create-target-group --name MyTargetGroup --protocol HTTP --port 80 --vpc-id vpc-12345678 --target-type instance

# 타겟 그룹에 EC2 인스턴스 등록
# 📌 등록: Auto Scaling 그룹의 인스턴스를 타겟으로 추가
aws elbv2 register-targets --target-group-arn arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/MyTargetGroup/1234567890123456 --targets Id=i-12345678901234567 Id=i-98765432109876543

# 리스너 생성: HTTP 요청을 타겟 그룹으로 라우팅
# 👂 리스너: 외부 요청을 받아 타겟 그룹으로 전달
aws elbv2 create-listener --load-balancer-arn arn:aws:elasticloadbalancing:us-east-2:123456789012:loadbalancer/MyALB/1234567890123456 --protocol HTTP --port 80 --default-actions Type=forward,TargetGroupArn=arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/MyTargetGroup/1234567890123456
```

---

### 4. DynamoDB 및 CloudWatch 통합

DynamoDB는 데이터 저장을, CloudWatch는 모니터링을 담당하며, Cloud Map은 서비스 디스커버리를 지원합니다.

#### 설정 테이블

| 작업                     | 설명 및 예시                                                                 | 예시 값              |
|--------------------------|------------------------------------------------------------------------------|----------------------|
| DynamoDB VPC 엔드포인트 생성 | 사설 네트워크에서 DynamoDB 접근, 라우팅 테이블 rtb-12345678에 연결          | 서비스 이름: com.amazonaws.us-east-2.dynamodb |
| CloudWatch 모니터링 설정 | EC2 CPU 사용량 모니터링, 알람 설정, SNS 주제 arn:aws:sns:us-east-2:123456789012 | 알람 이름: MyEC2CPUAlarm |
| Cloud Map 서비스 등록    | 동적 서비스 디스커버리, 네임스페이스 ns-12345678901234567, DNS 레코드 A, TTL 300 | 서비스 이름: MyService |

#### 명령어 및 주석

```bash
# DynamoDB VPC 엔드포인트 생성: 사설 네트워크에서 안전한 접근
# 🗄️ 데이터베이스: 공용 인터넷 없이 DynamoDB에 접근
aws ec2 create-vpc-endpoint --vpc-id vpc-12345678 --service-name com.amazonaws.us-east-2.dynamodb --vpc-endpoint-type Gateway --route-table-ids rtb-12345678

# CloudWatch 활성화: EC2 메트릭 모니터링 (CPU 사용량 등)
# 📊 모니터링: 성능 문제를 실시간으로 감지
aws cloudwatch put-metric-alarm --alarm-name MyEC2CPUAlarm --metric-name CPUUtilization --namespace AWS/EC2 --statistic Average --period 300 --threshold 70 --comparison-operator GreaterThanThreshold --dimensions Name=InstanceId,Value=i-12345678901234567 --evaluation-periods 1 --alarm-actions arn:aws:sns:us-east-2:123456789012:MySNSTopic

# Cloud Map 서비스 등록: 동적 서비스 디스커버리 활성화
# 🗺️ 디스커버리: 리소스 간 연결을 동적으로 관리
aws servicediscovery create-service --name MyService --namespace-id ns-12345678901234567 --dns-config '{"NamespaceId":"ns-12345678901234567","RoutingPolicy":"MULTIVALUE","DnsRecords":[{"Type":"A","TTL":300}]}' --health-check-custom-config '{"FailureThreshold":1}'
```

---

### 5. VPN을 통한 안전한 접근 설정

VPN을 통해 VPC 내 자원(예: EC2, DynamoDB)에 안전하게 접근합니다. AWS Client VPN, 자체 관리 VPN, Site-to-Site VPN을 설정합니다.

#### AWS Client VPN: 원격 사용자 접근

AWS Client VPN은 원격 사용자가 VPC 내 자원에 안전하게 접근할 수 있도록 설계된 관리형 서비스입니다.

```bash
# AWS Client VPN 엔드포인트 생성: VPC 내 자원 접근 허용
# 🔐 VPN: 원격 사용자를 위한 안전한 접근 경로 제공
aws ec2 create-client-vpn-endpoint --client-cidr-block 10.0.0.0/16 --server-certificate-arn arn:aws:acm:us-east-2:123456789012:certificate/12345678-1234-1234-1234-123456789012 --authentication-options Type=certificate-authentication,MutualAuthentication={ClientRootCertificateChainArn=arn:aws:acm:us-east-2:123456789012:certificate/98765432-4321-4321-4321-210987654321} --connection-log-options Enabled=false

# VPC 연결: 대상 네트워크와 라우팅 설정
# 🌐 연결: VPC 내 자원에 접근 가능하도록 설정
aws ec2 associate-client-vpn-target-network --client-vpn-endpoint-id cvpn-endpoint-12345678 --subnet-id subnet-12345678

# 인증 규칙 추가: VPC CIDR에 대한 접근 허용
# 🔒 인증: 특정 네트워크에 대한 접근 제어
aws ec2 authorize-client-vpn-ingress --client-vpn-endpoint-id cvpn-endpoint-12345678 --target-network-cidr 10.0.0.0/16 --authorize-all-groups
```

#### 자체 관리 VPN 서버: Open VPN 설정

공용 서브넷에 Open VPN 서버를 설정하여 EC2 인스턴스에 안전하게 접근합니다.

```bash
# Open VPN 서버 설정: 공용 서브넷에 EC2 인스턴스로 배포
# 🖥️ VPN 서버: Open VPN Access Server AMI를 사용하여 설정
aws ec2 run-instances --image-id ami-openvpn-12345678 --instance-type t2.micro --subnet-id subnet-12345678 --security-group-ids sg-12345678 --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=OpenVPNServer}]'

# 클라이언트 구성 파일 생성 및 배포: 관리자가 SSH로 접근 가능
# 🔐 인증: 클라이언트 인증서를 생성하여 배포
# Open VPN 서버에 접속하여 구성 파일 다운로드 후 사용자에게 배포
```

#### Site-to-Site VPN: 온프레미스와 VPC 연결

온프레미스 네트워크와 VPC 간 안전한 연결을 설정합니다.

```bash
# 가상 개인 게이트웨이 생성: VPC에 부착
# 🌐 게이트웨이: Site-to-Site VPN을 위한 VPC 측 설정
aws ec2 create-vpn-gateway --type ipsec.1 --tag-specifications 'ResourceType=vpn-gateway,Tags=[{Key=Name,Value=MyVPNGateway}]'
aws ec2 attach-vpn-gateway --vpn-gateway-id vgw-12345678 --vpc-id vpc-12345678

# 고객 게이트웨이 생성: 온프레미스 네트워크 정보 입력
# 🏢 온프레미스: 고객 네트워크와 연결
aws ec2 create-customer-gateway --type ipsec.1 --public-ip 203.0.113.1 --bgp-asn 65000 --tag-specifications 'ResourceType=customer-gateway,Tags=[{Key=Name,Value=MyCustomerGateway}]'

# VPN 연결 생성: 가상 개인 게이트웨이와 고객 게이트웨이 연결
# 🔗 연결: IPsec 터널로 안전한 통신 보장
aws ec2 create-vpn-connection --type ipsec.1 --customer-gateway-id cgw-12345678 --vpn-gateway-id vgw-12345678 --tag-specifications 'ResourceType=vpn-connection,Tags=[{Key=Name,Value=MyVPNConnection}]'
```

---

### 6. 테스트 및 서버 열기

설정 완료 후, 서버가 정상 작동하는지 테스트하고, ALB를 통해 외부 트래픽을 수신합니다. VPN을 통해 사설 자원에 접근합니다.

#### 명령어 및 주석

```bash
# 헬스 체크 확인: 타겟 그룹 상태 "healthy"인지 확인
# ✅ 검증: 인스턴스가 정상적으로 작동하는지 확인
aws elbv2 describe-target-health --target-group-arn arn:aws:elasticloadbalancing:us-east-2:123456789012:targetgroup/MyTargetGroup/1234567890123456

# ALB DNS 이름 확인: 브라우저에서 접근 가능 여부 테스트
# 🌐 접근: 외부에서 서버에 접근 가능 여부 확인
curl my-alb-1234567890abcdef.elb.us-east-2.amazonaws.com

# VPN 연결 후 사설 자원 접근: EC2 인스턴스 SSH 접근
# 🔐 VPN 접근: Open VPN 클라이언트를 통해 연결 후 SSH
ssh -i key.pem ubuntu@10.0.2.5

# 모든 설정 완료 후 서버 열기: ALB를 통해 트래픽 수신 시작
# 🚀 서버 열기: 외부 트래픽을 받아 처리 가능 상태
```

---

## 통합 옵션 비교

| 기능                     | 주요 용도                                      | 적용 시나리오                          | 고려 사항                     |
|--------------------------|-----------------------------------------------|---------------------------------------|-------------------------------|
| Systems Manager Automation | EC2 작업 자동화 (재시작, 중지, AMI 생성)       | 정기 유지 관리, 백업                  | IAM 역할 권한 확인            |
| Auto Scaling             | 트래픽 기반 인스턴스 조정                      | 웹 애플리케이션 트래픽 관리           | 스케일링 정책 최적화          |
| AWS Client VPN           | 원격 사용자 VPC 자원 접근                      | 재택 근무자 데이터베이스 접근         | 인증서 관리                   |
| 자체 관리 VPN 서버       | EC2 관리, 민감한 작업 수행                     | 공용 IP 없는 인스턴스 관리            | 서버 유지보수 필요            |
| Site-to-Site VPN         | 온프레미스와 VPC 간 연결                       | 하이브리드 클라우드 환경              | 네트워크 설정 복잡성          |

---

## 추가 고려 사항

- **비용 관리**: EC2 자동화와 VPN 설정은 비용 절감에 기여합니다. 예를 들어, 비활성 시간에 인스턴스를 중지하거나, AWS Client VPN의 자동 확장 기능을 활용하세요.
- **보안 강화**: VPN을 통해 트래픽을 암호화하고, 보안 그룹과 네트워크 ACL을 적절히 설정하여 접근 제어를 강화하세요.
- **팀 협업**: CloudFormation 템플릿을 사용하면 팀 간 설정 일관성을 유지할 수 있습니다.

---

## 참고 자료

- [AWS Systems Manager Automation](https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-automation.html)
- [AWS CLI Command Reference](https://docs.aws.amazon.com/en/paginated-list/index.html?docid=cli)
- [AWS CloudFormation User Guide](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/welcome.html)
- [AWS Auto Scaling User Guide](https://docs.aws.amazon.com/autoscaling/index.html)
- [AWS Lambda Developer Guide](https://docs.aws.amazon.com/lambda/index.html)
- [AWS CloudWatch Events User Guide](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/Welcome.html)
- [AWS Client VPN 사용자 가이드](https://docs.aws.amazon.com/vpn/latest/clientvpn-user/)
- [AWS Client VPN 시작 가이드](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/cvpn-getting-started.html)
- [AWS Site-to-Site VPN 연결 설정](https://docs.aws.amazon.com/vpc/latest/userguide/vpn-connections.html)
- [Open VPN AWS 설정 단계별 가이드](https://medium.com/@sanoj.sudo/how-to-set-up-a-vpn-on-aws-a8c1128ab3e1)

---
